setwd("~/Desktop/r lab")
library(dplyr)
library(ggplot2)
library(tidyr)
library(dplyr)
library(ggplot2)
library(tidyr)
#Read dataset from CSV file
file_path <- "Titanic_train.csv"
data <- read.csv(file_path)
#Exploratory Data Analysis (EDA)
# Summary statistics
summary_stats <- summary(data)
print(summary_stats)
# For example, let's create a histogram for age
print(ggplot(data, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black") +
labs(title = "Distribution of Age on Titanic",
x = "Age",
y = "Frequency"))
# For example, let's create a histogram for age
print(ggplot(data, aes(x = Age)) +
geom_histogram(binwidth = 20, fill = "blue", color = "black") +
labs(title = "Distribution of Age on Titanic",
x = "Age",
y = "Frequency"))
# For example, let's create a histogram for age
print(ggplot(data, aes(x = Age)) +
geom_histogram(binwidth = 5, fill = "blue", color = "black") +
labs(title = "Distribution of Age on Titanic",
x = "Age",
y = "Frequency"))
# Identifying missing values
missing_values <- colSums(is.na(data))
print(missing_values)
# Remove duplicates
data <- distinct(data)
#Removing missing values
data$Age[is.na(data$Age)] <- mean(data$Age, na.rm = TRUE)
missing_values <- colSums(is.na(data))
print(missing_values)
# Merging datasets (if applicable)
file_path <- "Adata.csv"
A <- read.csv(file_path)
# Merging datasets (if applicable)
file_path <- "Adata.csv"
A <- read.csv(file_path)
# Create a new data frame with additional info for a few passengers
additional_data <- data.frame(
PassengerId = c(2, 4, 6, 10),
CountryOfOrigin = c("USA", "UK", "Canada", "USA"),
IsStaff = c(FALSE, FALSE, TRUE, FALSE)
)
# You can print it to see what it looks like
print(additional_data)
# Save the data frame to a file named "Adata.csv"
write.csv(additional_data, "Adata.csv", row.names = FALSE)
# Merging datasets (if applicable)
file_path <- "Adata.csv"
A <- read.csv(file_path)
# Check column names in both datasets
print(colnames(data))
print(colnames(A))
# Merge based on 'PassengerId'
merged_data <- merge(data, A, by.x = "PassengerId", by.y = "PassengerId")
print(merged_data)
print(boxplot(Age ~ Survived, data = data, col = c("red", "blue"), main = "Boxplot of Age by Survived"))
# Example: Hypothesis testing (t-test)
# Check the assumptions (visualize the distribution of ages for each group)
print(boxplot(Age ~ Survived, data = data, col = c("red", "blue"), main = "Boxplot of Age by Survived"))
# Conduct t-test
t_test_result <- t.test(Age ~ Survived, data = data)
# Print the t-test result
print(t_test_result)
# Calculate the correlation coefficient between 'Age' and 'Fare'
correlation_coefficient <- cor(data$Age, data$Fare)
# Print the result
print(correlation_coefficient)
print(ggplot(data, aes(x = factor(Survived), fill = factor(Survived))) +
geom_bar() +
labs(title = "Number of Survivors on Titanic",
x = "Survived",
y = "Count") +
scale_fill_manual(values = c("red", "green")))
# Select numeric columns and compute the correlation matrix
numeric_data <- churn_data %>% select(tenure, MonthlyCharges, TotalCharges)
#install.packages("tidyverse")
# Load necessary libraries
library(tidyverse)
library(ggplot2)
# Read the data
# Note: The file seems to have a .xls extension but is likely a CSV.
# If read.csv fails, you might need a library like 'readxl' for actual .xls files.
# Let's assume it's a CSV based on the function used.
churn_data <- read.csv("WA_Fn-UseC_-Telco-Customer-Churn.csv") # Corrected file name assumption
setwd("~/Desktop/ai project main woerking directory")
# Read the data
# Note: The file seems to have a .xls extension but is likely a CSV.
# If read.csv fails, you might need a library like 'readxl' for actual .xls files.
# Let's assume it's a CSV based on the function used.
churn_data <- read.csv("WA_Fn-UseC_-Telco-Customer-Churn.csv") # Corrected file name assumption
setwd("~/Desktop/ai project main woerking directory")
#install.packages("tidyverse")
# Load necessary libraries
library(tidyverse)
library(ggplot2)
# Read the data
# Note: The file seems to have a .xls extension but is likely a CSV.
# If read.csv fails, you might need a library like 'readxl' for actual .xls files.
# Let's assume it's a CSV based on the function used.
churn_data <- read.csv("WA_Fn-UseC_-Telco-Customer-Churn.csv") # Corrected file name assumption
churn_data <- read.csv("WA_Fn-UseC_-Telco-Customer-Churn.csv")
churn_data <- read.csv("WA_Fn-UseC_-Telco-Customer-Churn.xls")
# Clean TotalCharges and remove customerID (ONCE)
churn_data <- churn_data %>%
mutate(TotalCharges = as.numeric(TotalCharges)) %>%
mutate(TotalCharges = ifelse(is.na(TotalCharges), 0, TotalCharges)) %>%
select(-customerID)
#install.packages("tidyverse")
# Load necessary libraries
library(tidyverse)
library(ggplot2)
View(A)
View(additional_data)
View(additional_data)
# Clean TotalCharges and remove customerID (ONCE)
churn_data <- churn_data %>%
mutate(TotalCharges = as.numeric(TotalCharges)) %>%
mutate(TotalCharges = ifelse(is.na(TotalCharges), 0, TotalCharges)) %>%
select(-customerID)
setwd("~/Desktop/ai project main woerking directory")
churn_data <- read.csv("WA_Fn-UseC_-Telco-Customer-Churn.xls")
churn_data <- churn_data %>%
mutate(TotalCharges = as.numeric(TotalCharges)) %>%
mutate(TotalCharges = ifelse(is.na(TotalCharges), 0, TotalCharges)) %>%
select(-customerID)
View(A)
View(additional_data)
View(churn_data)
# Create a bar chart showing churn counts for each contract type
ggplot(churn_data, aes(x = Contract, fill = Churn)) +
geom_bar(position = "dodge") +
labs(title = "Customer Churn by Contract Type",
x = "Contract Type",
y = "Number of Customers") +
theme_minimal()
# Create a bar chart showing churn counts for each internet service type
ggplot(churn_data, aes(x = InternetService, fill = Churn)) +
geom_bar(position = "dodge") +
labs(title = "Customer Churn by Internet Service Type",
x = "Internet Service",
y = "Number of Customers") +
theme_minimal()
# Create box plots to compare MonthlyCharges for churned vs. non-churned customersâ€‹
ggplot(churn_data, aes(x = Churn, y = MonthlyCharges, fill = Churn)) +
geom_boxplot() +
labs(title = "Monthly Charges by Churn Status",
x = "Churn Status",
y = "Monthly Charges ($)") +
theme_minimal()
# Create density plots of tenure, faceted by Churn status
ggplot(churn_data, aes(x = tenure, fill = Churn)) +
geom_density(alpha = 0.6) +
facet_wrap(~Churn) +
labs(title = "Distribution of Tenure by Churn Status",
x = "Tenure (Months)",
y = "Density") +
theme_minimal()
install.packages(c("tidyverse", "caret", "randomForest", "xgboost", "corrplot"))
install.packages(c("tidyverse", "caret", "randomForest", "xgboost", "corrplot"))
