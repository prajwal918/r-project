library(tidyverse)
library(ggplot2)
library(caret)
library(randomForest)
setwd("C:/Users/User/Desktop/ai project main woerking directory")
churn_data <- read.csv("WA_Fn-UseC_-Telco-Customer-Churn.xls")
churn_data <- churn_data %>%
mutate(TotalCharges = as.numeric(TotalCharges)) %>%
mutate(TotalCharges = ifelse(is.na(TotalCharges), 0, TotalCharges)) %>%
select(-customerID)
churn_data <- churn_data %>%
mutate(across(c(OnlineSecurity, OnlineBackup, DeviceProtection, TechSupport,
StreamingTV, StreamingMovies),
~ recode(., "No internet service" = "No"))) %>%
mutate(MultipleLines = recode(MultipleLines, "No phone service" = "No"))
churn_data <- churn_data %>%
mutate(across(where(is.character), as.factor))
churn_rate <- churn_data %>%
count(Churn) %>%
mutate(Proportion = n / sum(n))
print(churn_rate)
ggplot(churn_data, aes(x = Contract, fill = Churn)) +
geom_bar(position = "dodge") +
labs(title = "Customer Churn by Contract Type",
x = "Contract Type",
y = "Number of Customers") +
theme_minimal()
ggplot(churn_data, aes(x = InternetService, fill = Churn)) +
geom_bar(position = "dodge") +
labs(title = "Customer Churn by Internet Service Type",
x = "Internet Service",
y = "Number of Customers") +
theme_minimal()
ggplot(churn_data, aes(x = Churn, y = MonthlyCharges, fill = Churn)) +
geom_boxplot() +
labs(title = "Monthly Charges by Churn Status",
x = "Churn Status",
y = "Monthly Charges ($)") +
theme_minimal()
ggplot(churn_data, aes(x = Churn, y = MonthlyCharges, fill = Churn)) +
geom_boxplot() +
labs(title = "Monthly Charges by Churn Status",
x = "Churn Status",
y = "Monthly Charges ($)") +
theme_minimal()
numeric_data <- churn_data %>% select(tenure, MonthlyCharges, TotalCharges)
correlation_matrix <- cor(numeric_data)
print(correlation_matrix)
set.seed(123)
# Ensure response is a factor (should already be from earlier step)
churn_data$Churn <- as.factor(churn_data$Churn)
trainIndex <- createDataPartition(churn_data$Churn, p = 0.8, list = FALSE, times = 1)
train_data <- churn_data[trainIndex, ]
test_data  <- churn_data[-trainIndex, ]
log_model <- glm(Churn ~ ., data = train_data, family = binomial)
rf_model <- randomForest(Churn ~ ., data = train_data)
log_predictions <- predict(log_model, test_data, type = "response")
log_pred_class <- factor(ifelse(log_predictions > 0.5, "Yes", "No"),
levels = levels(test_data$Churn))
cm_log <- confusionMatrix(log_pred_class, test_data$Churn, positive = "Yes")
print(cm_log)
# Random Forest Predictions
rf_predictions <- predict(rf_model, test_data)
rf_predictions <- factor(rf_predictions, levels = levels(test_data$Churn))
cm_rf <- confusionMatrix(rf_predictions, test_data$Churn, positive = "Yes")
print(cm_rf)
# --- Train Models ---
# Logistic Regression
log_model <- glm(Churn ~ ., data = train_data, family = binomial)
# Random Forest
rf_model <- randomForest(Churn ~ ., data = train_data)
log_predictions <- predict(log_model, test_data, type = "response")
log_pred_class <- factor(ifelse(log_predictions > 0.5, "Yes", "No"),
levels = levels(test_data$Churn))
cm_log <- confusionMatrix(log_pred_class, test_data$Churn, positive = "Yes")
print(cm_log)
